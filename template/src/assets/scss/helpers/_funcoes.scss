@function em($n) {
  @return ($n / 16) * 1em;
}

@function por($n) {
  @return ($n / 960) * 1%;
}


/* Media Query */
$tablet-width: 768px;
$desktop-width: 1024px;

@mixin mobile {
  @media (max-width: 767px) {
    @content;
  }
}

/*
	uso
	@include tablet {
    font-size: 20px;
  }
 */

@mixin tablet {
  @media (min-width: #{$tablet-width}) {
    @content;
  }
}

/*
	uso
	@include desktop {
    font-size: 20px;
  }
 */

@mixin desktop {
  @media (min-width: #{$desktop-width}) {
    @content;
  }
}


/* Vertical align */

@mixin vertical-align($position: relative) {
  position: $position;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

@mixin breakpoint($point) {
  @if $point==retina {
    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
      @content;
    }
  }
  @if $point==xxlarge {
    @media (min-width: 1921px) {
      @content;
    }
  }
  @if $point==xlarge {
    @media (min-width: 1600px) {
      @content;
    }
  }
  @if $point==large {
    @media (min-width: 1441px) {
      @content;
    }
  }
  @else if $point==regular-screen {
    @media (min-width: 1200px) {
      @content;
    }
  }
  @else if $point==medium {
    @media (min-width: 1024px) {
      @content;
    }
  }
  @else if $point==landscape {
    @media (min-width: 1024px) {
      @content;
    }
  }
  @else if $point==smaller-screen {
    @media (min-width: 800px) {
      @content;
    }
  }
  @else if $point==portrait {
    @media (min-width: 768px) {
      @content;
    }
  }
  @else if $point==small {
    @media (min-width: 640px) {
      @content;
    }
  }
  @else if $point==large-mobile {
    @media (min-width: 480px) {
      @content;
    }
  }
  @else if $point==mobile {
    @media (min-width: 360px) {
      @content;
    }
  }
}

// ==============================
// USAGE
// ==============================
// .something {
//   padding: 100px;
//   @include breakpoint(small) {
//     padding: 10px;
//   }
// }
// ==============================
// CREATES AN ARROW
// ==============================
@mixin arrow ($direction, $size, $color) {
  @if $direction==up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  }
  @else if $direction==down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
  }
  @else if $direction==right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  }
  @else if $direction==left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
  }
}

// ==============================
// USAGE
// ==============================
// .read-more { 
//   &:before {
//     @include arrow (right, 3px, black);
//   }
// }
@function darkest( $color) {
  @return darken($color, 20%);
}

@function darker( $color) {
  @return darken($color, 13.333%);
}

@function dark( $color) {
  @return darken($color, 6.667%);
}

@function light( $color) {
  @return lighten($color, 16.667%);
}

@function lighter( $color) {
  @return lighten($color, 33.333%);
}

@function lightest( $color) {
  @return lighten($color, 50%);
}

// ==============================
// USAGE
// ==============================
// a {
// 	&:hover {
// 		color: darker($red);
// 	}
// }

@mixin circle() {
  border-radius: 50em;
}

@mixin pseudo($display: block, $pos: absolute, $content: ''){
  content: $content;
  display: $display;
  position: $pos;
}

// ==============================
// USAGE
// ==============================
// div::after {
//   @include pseudo;
//   top: -1rem; left: -1rem;
//   width: 1rem; height: 1rem;
// }

// ==============================
// USAGE
// ==============================
// .circle-thumbnail {
//   @extend %circle;
// }
@mixin responsive-ratio($x, $y, $pseudo: false) {
  $padding: unquote( ( $y / $x) * 100 + '%');
  @if $pseudo {
    &:before {
      @include pseudo($pos: relative);
      width: 100%;
      padding-top: $padding;
    }
  }
  @else {
    padding-top: $padding;
  }
}

// ==============================
// USAGE
// ==============================
// div {
//   @include responsive-ratio(16, 9);
// }
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false) {
  @include pseudo($pos: $position);
  width: 0;
  height: 0;
  @if $round {
    border-radius: 3px;
  }
  @if $direction==down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
    margin-top: 0 - round( $size / 2.5);
  }
  @else if $direction==up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round( $size / 2.5);
  }
  @else if $direction==right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    margin-right: -$size;
  }
  @else if $direction==left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    margin-left: -$size;
  }
}

// PALCHOLDER
@mixin input-placeholder {
  &.placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
}

// ==============================
// USAGE
// ==============================
// input,
// textarea {
//   @include input-placeholder {
//     color: $grey;
//   }
// }
$z-indexes: ( "outdated-browser", "modal", "site-header", "page-wrapper", "site-footer");
@function z($name) {
  @if index($z-indexes, $name) {
    @return (length($z-indexes) - index($z-indexes, $name))+1;
  }
  @else {
    @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
    @return null;
  }
}

// ==============================
// USAGE
// ==============================
// .site-header {
//   z-index: z('site-header');
// }

@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@function vw($object, $width) {
  $vw: ($width * 0.01) * 1px;
  @return ($object / $vw) * 1vw;
}

@function vh($object, $width) {
  $vh: ($width * 0.01) * 1px;
  @return ($object / $vh) * 1vh;
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  >.content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

@mixin keyframes($name, $degs) {
  @keyframes #{$name} {
    0% {
      transform: rotate(#{$degs}deg);
    }
    25% {
      transform: rotate(#{$degs + 6.5}deg);
    }
    50% {
      transform: rotate(#{$degs}deg);
    }
    75% {
      transform: rotate(#{$degs - 6.5}deg);
    }
    100% {
      transform: rotate(#{$degs}deg);
    }
  }
}

// ==============================
// Font size mixin
// ==============================

//  default font scale bounding
$font-lock-min:  480px !default; 
$font-lock-max: 1440px !default;

//  font-size 
@mixin font-size(
  $min,                         // font-size 
  $max: null,                   // optional maximum font size
  $lock-min: $font-lock-min,  // optional minimum viewport width 
  $lock-max: $font-lock-max   // optional maximum viewport width 
  ){
    & { font-size: $min; }
    @if $max {
      @media (min-width: $lock-min) and (max-width: $lock-max){ 
        & { 
          font-size: calc(
            #{$min} + 
            #{num($max) - num($min)} * 
            (100vw - #{$lock-min}) / 
            #{num($lock-max) - num($lock-min)}
          ); 
        } 
      }
      @media (min-width: $lock-max){ 
        & { font-size: $max; } 
      }
    }
}

//  strip units helper function
@function num($input){ 
  @return $input/($input * 0 + 1); 
}

// ==============================
// Usage
// ==============================

// simple (no scale)  
// p { @include font-size(15px); }       

//  fluid scale based on default bounding
// :root { @include font-size(16px, 24px); }

//  fluid scale based on custom bounding
//  (you could also change defaults) 
// :root { @include font-size(16px, 24px, 320px, 960px); }
